// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTicaret.DataAccsess;

namespace eTicaret.DataAccsess.Migrations
{
    [DbContext(typeof(ETicaretDbContext))]
    partial class ETicaretDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eTicaret.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Directions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("eTicaret.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("eTicaret.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Share")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("eTicaret.Entities.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrimaryKey")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("eTicaret.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TaxNo")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("eTicaret.Entities.CompanyEarning", b =>
                {
                    b.Property<int>("CompanyEarningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("TotalEarning")
                        .HasColumnType("int");

                    b.HasKey("CompanyEarningId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyEarnings");
                });

            modelBuilder.Entity("eTicaret.Entities.CompanyProduct", b =>
                {
                    b.Property<int>("CompanyProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.HasKey("CompanyProductId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyProducts");
                });

            modelBuilder.Entity("eTicaret.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Tc")
                        .HasColumnType("bigint");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("eTicaret.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("eTicaret.Entities.ProductInformation", b =>
                {
                    b.Property<int>("ProductInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductInformationId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductInformations");
                });

            modelBuilder.Entity("eTicaret.Entities.Shopping", b =>
                {
                    b.Property<int>("ShoppingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("Count")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Earning")
                        .HasColumnType("float");

                    b.Property<int>("Piece")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Share")
                        .HasColumnType("float");

                    b.Property<double>("SitesEarning")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("WaitingProductId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WaitingProductId");

                    b.ToTable("Shoppings");
                });

            modelBuilder.Entity("eTicaret.Entities.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SoldProduct")
                        .HasColumnType("int");

                    b.Property<int>("StockProduct")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("eTicaret.Entities.WaitingProduct", b =>
                {
                    b.Property<int>("WaitingProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShoppingId")
                        .HasColumnType("int");

                    b.HasKey("WaitingProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyProductId");

                    b.ToTable("WaitingProducts");
                });

            modelBuilder.Entity("eTicaret.Entities.WaitingProductInformation", b =>
                {
                    b.Property<int>("WaitingProductInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WaitingProductId")
                        .HasColumnType("int");

                    b.HasKey("WaitingProductInformationId");

                    b.HasIndex("WaitingProductId")
                        .IsUnique();

                    b.ToTable("WaitingProductInformation");
                });

            modelBuilder.Entity("eTicaret.Entities.WaitingStock", b =>
                {
                    b.Property<int>("WaitingStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SoldProduct")
                        .HasColumnType("int");

                    b.Property<int>("StockProduct")
                        .HasColumnType("int");

                    b.Property<int>("WaitingProductId")
                        .HasColumnType("int");

                    b.HasKey("WaitingStockId");

                    b.HasIndex("WaitingProductId")
                        .IsUnique();

                    b.ToTable("WaitingStock");
                });

            modelBuilder.Entity("eTicaret.Entities.Address", b =>
                {
                    b.HasOne("eTicaret.Entities.Customer", "Customer")
                        .WithOne("Address")
                        .HasForeignKey("eTicaret.Entities.Address", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eTicaret.Entities.CompanyEarning", b =>
                {
                    b.HasOne("eTicaret.Entities.Company", "Company")
                        .WithOne("CompanyEarning")
                        .HasForeignKey("eTicaret.Entities.CompanyEarning", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("eTicaret.Entities.CompanyProduct", b =>
                {
                    b.HasOne("eTicaret.Entities.Company", "Company")
                        .WithOne("CompanyProduct")
                        .HasForeignKey("eTicaret.Entities.CompanyProduct", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("eTicaret.Entities.Product", b =>
                {
                    b.HasOne("eTicaret.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTicaret.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTicaret.Entities.CompanyProduct", "CompanyProduct")
                        .WithMany("Products")
                        .HasForeignKey("CompanyProductId");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("CompanyProduct");
                });

            modelBuilder.Entity("eTicaret.Entities.ProductInformation", b =>
                {
                    b.HasOne("eTicaret.Entities.Product", "Product")
                        .WithOne("ProductInformation")
                        .HasForeignKey("eTicaret.Entities.ProductInformation", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eTicaret.Entities.Shopping", b =>
                {
                    b.HasOne("eTicaret.Entities.Customer", "Customer")
                        .WithMany("Shoppings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTicaret.Entities.Product", "Product")
                        .WithMany("Shoppings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTicaret.Entities.WaitingProduct", null)
                        .WithMany("Shoppings")
                        .HasForeignKey("WaitingProductId");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eTicaret.Entities.Stock", b =>
                {
                    b.HasOne("eTicaret.Entities.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("eTicaret.Entities.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eTicaret.Entities.WaitingProduct", b =>
                {
                    b.HasOne("eTicaret.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTicaret.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTicaret.Entities.CompanyProduct", "CompanyProduct")
                        .WithMany()
                        .HasForeignKey("CompanyProductId");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("CompanyProduct");
                });

            modelBuilder.Entity("eTicaret.Entities.WaitingProductInformation", b =>
                {
                    b.HasOne("eTicaret.Entities.WaitingProduct", "Product")
                        .WithOne("ProductInformation")
                        .HasForeignKey("eTicaret.Entities.WaitingProductInformation", "WaitingProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eTicaret.Entities.WaitingStock", b =>
                {
                    b.HasOne("eTicaret.Entities.WaitingProduct", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("eTicaret.Entities.WaitingStock", "WaitingProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eTicaret.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eTicaret.Entities.Company", b =>
                {
                    b.Navigation("CompanyEarning");

                    b.Navigation("CompanyProduct");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("eTicaret.Entities.CompanyProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eTicaret.Entities.Customer", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Shoppings");
                });

            modelBuilder.Entity("eTicaret.Entities.Product", b =>
                {
                    b.Navigation("ProductInformation");

                    b.Navigation("Shoppings");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("eTicaret.Entities.WaitingProduct", b =>
                {
                    b.Navigation("ProductInformation");

                    b.Navigation("Shoppings");

                    b.Navigation("Stock");
                });
#pragma warning restore 612, 618
        }
    }
}
